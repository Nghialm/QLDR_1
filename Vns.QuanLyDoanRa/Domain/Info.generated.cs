/*
insert license info here
*/
using System;
using System.ComponentModel;
using Vns.Erp.Core.Domain;
using System.Runtime.Serialization;
namespace Vns.QuanLyDoanRa.Domain
{
	/// <summary>
	///	Generated by MyGeneration using the NHibernate Object Mapping adapted by Gustavo And Modified By Hoang Quoc Dung
	/// </summary>
    
	[Serializable]
    [DataContract(Namespace = "http://Vns.QuanLyDoanRa", IsReference = true)]
	public partial class Info : DomainObject<Guid>, INotifyPropertyChanged
	{
		public event PropertyChangedEventHandler PropertyChanged;
        private void NotifyPropertyChanged(String propertyName)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }		
		#region Private Members
		private bool _isChanged;
		private bool _isDeleted;
		private Guid _id; 
		private string _ma; 
		private string _giatri; 
		private int _trangthai;
        private string _mota;
		#endregion
		
		#region Default ( Empty ) Class Constuctor
		/// <summary>
		/// default constructor
		/// </summary>
		public Info()
		{
				_id =  new Guid();
                _ma = string.Empty;
                _giatri = string.Empty;  
				_trangthai = 0;
                _mota = string.Empty;
		}
		#endregion // End of Default ( Empty ) Class Constuctor
		
		#region Public Properties
			
		/// <summary>
		/// 
		/// </summary>		
		public  Guid Id
		{
			get { return _id; }
			set { _isChanged |= (_id != value); _id = value; }
			}
			
			
		/// <summary>
		/// 
		/// </summary>		
		public  string Ma
		{
			get { return _ma; }
			set	
			{
				if ( value != null)
					if( value.Length > 250)
						throw new ArgumentOutOfRangeException("Invalid value for Ma", value, value.ToString());
				
				_isChanged |= (_ma != value); _ma = value;
			}
			}

        public string MoTa
        {
            get { return _mota; }
            set
            {
                if (value != null)
                    if (value.Length > 250)
                        throw new ArgumentOutOfRangeException("Invalid value for Mota", value, value.ToString());

                _isChanged |= (_mota != value); _mota = value;
            }
        }
			
		/// <summary>
		/// 
		/// </summary>		
		public  string GiaTri
		{
			get { return _giatri; }
			set	
			{
				if ( value != null)
					if( value.Length > 250)
						throw new ArgumentOutOfRangeException("Invalid value for GiaTri", value, value.ToString());
				
				_isChanged |= (_giatri != value); _giatri = value;
			}
			}
			
			
		/// <summary>
		/// 
		/// </summary>		
		public  int TrangThai
		{
			get { return _trangthai; }
			set { _isChanged |= (_trangthai != value); _trangthai = value; }
			}
			
			
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsChanged
		{
			get { return _isChanged; }
		}
		
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsDeleted
		{
			get { return _isDeleted; }
		}
		
		#endregion 
		
		
		#region Public Functions
		
		/// <summary>
		/// mark the item as deleted
		/// </summary>
		public void MarkAsDeleted()
		{
			_isDeleted = true;
			_isChanged = true;
		}
		
		
		#endregion
		
		
		#region Equals And HashCode Overrides
		/// <summary>
		/// local implementation of Equals based on unique value members
		/// </summary>
		public override bool Equals( object obj )
		{
			if( this == obj ) return true;
			if( ( obj == null ) || ( obj.GetType() != this.GetType() ) ) return false;
			Info castObj = (Info)obj; 
			return ( castObj != null ) &&
				( this._id == castObj.Id);
		}
		
		/// <summary>
		/// local implementation of GetHashCode based on unique value members
		/// </summary>
		public override int GetHashCode()
		{
			
			int hash = 57; 
			hash = 27 * hash * _id.GetHashCode();
			return hash; 
		}
		#endregion
		
	}
}
